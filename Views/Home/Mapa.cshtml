@model BankZdjecOlsztyn.ViewsModels.HomeViewsModel
<link href="~/lib/css/ol-ext.css" rel="stylesheet" />
<link rel="stylesheet" href="~/lib/css/ol_v5.2.0.css" type="text/css">
<link rel="stylesheet" href="~/lib/css/ol-popup.css" type="text/css">
<script src="~/lib/js/ol-ext.js"></script>
<script src="~/lib/js/ol-popup.js"></script>
<script src="~/lib/js/ol_v5.2.0.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/openlayers/2.11/lib/OpenLayers.js"></script>
<div id="mapdiv" class="map col-12"></div>

<script type="text/javascript">
                    map = new OpenLayers.Map("mapdiv");
                    map.addLayer(new OpenLayers.Layer.OSM());
                    epsg4326 =  new OpenLayers.Projection("EPSG:4326");
                    projectTo = map.getProjectionObject();
    var lonLat = new OpenLayers.LonLat(20.45594, 53.74374 ).transform(epsg4326, projectTo);
                    var zoom=14;
                    map.setCenter (lonLat, zoom);
                    var vectorLayer = new OpenLayers.Layer.Vector("Overlay");
    var places = [
    ];
    var ile = @Model.Miejsca.Count ;
    var tabS =[@foreach (var item in Model.Miejsca)
        {
            @((item.szerokosc * 1000000000000000).ToString() +',' )
    }
    ];
    var tabW = [@foreach (var item in Model.Miejsca)
        {
             @((item.wysokosc * 1000000000000000).ToString() +',' )
    }
    ];
    var tabNazwa = "@foreach (var item in Model.Miejsca)
        {
            @((item.Nazwa.ToString()+"~"))
    }";
    var tabAdres = "@foreach (var item in Model.Miejsca)
        {
             @(("~/images/" + item.ZdieciaList.First().Url) +'$' )
    }";
    
    tabNazwa = tabNazwa.split('~');
    tabAdres = tabAdres.split('$');
    for (var i = 0; i < ile; i++) {
        places[i] = [];
        places[i][0] = tabW[i] / 1000000000000000;
        places[i][1] = tabS[i] / 1000000000000000;
        places[i][2] = 'http://maps.google.com/mapfiles/ms/micons/blue.png';
        places[i][3] = tabNazwa[i];
        places[i][4] = tabAdres[i];
    }
    for (var i = 0; i < places.length; i++) {
        var feature = new OpenLayers.Feature.Vector(
            new OpenLayers.Geometry.Point(places[i][0], places[i][1]).transform(epsg4326, projectTo),
            { description: places[i][3]+ '<img src ="'+places[i][4]+'"asp-append-version="true" class="img-fluid"/>'  },
            //{ image: places[i][4]},
            { externalGraphic: places[i][2], graphicHeight: 25, graphicWidth: 21, graphicXOffset: -12, graphicYOffset: -25 }
        );
        vectorLayer.addFeatures(feature);
    }

        map.addLayer(vectorLayer);

        var controls = {
                            selector: new OpenLayers.Control.SelectFeature(vectorLayer, {onSelect: createPopup, onUnselect: destroyPopup })
        };
        function createPopup(feature) {
                            feature.popup = new OpenLayers.Popup.FramedCloud("pop",
                                feature.geometry.getBounds().getCenterLonLat(),
                                null,
                                '<div class="markerContent">' + feature.attributes.description  + '</div>',
                                null,
                                true,
                                function () { controls['selector'].unselectAll(); }
                            );

          map.addPopup(feature.popup);
        }
        function destroyPopup(feature) {
                            feature.popup.destroy();
          feature.popup = null;
        }
        map.addControl(controls['selector']);
        controls['selector'].activate();
</script>